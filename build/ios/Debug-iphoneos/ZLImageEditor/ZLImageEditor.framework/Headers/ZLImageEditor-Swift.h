#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
#ifndef ZLIMAGEEDITOR_SWIFT_H
#define ZLIMAGEEDITOR_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ZLImageEditor",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)





typedef SWIFT_ENUM(NSInteger, ZLAdjustSliderType, closed) {
  ZLAdjustSliderTypeVertical = 0,
  ZLAdjustSliderTypeHorizontal = 1,
};


SWIFT_CLASS("_TtC13ZLImageEditor10ZLDrawPath")
@interface ZLDrawPath : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13ZLImageEditor16ZLEditImageModel")
@interface ZLEditImageModel : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIImage;
@class NSCoder;
@protocol UIViewControllerTransitionCoordinator;
@class NSString;
@class NSBundle;

SWIFT_CLASS("_TtC13ZLImageEditor25ZLEditImageViewController")
@interface ZLEditImageViewController : UIViewController
@property (nonatomic, copy) void (^ _Nullable editFinishBlock)(UIImage * _Nonnull, ZLEditImageModel * _Nullable);
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
+ (void)showEditImageVCWithParentVC:(UIViewController * _Nullable)parentVC animate:(BOOL)animate image:(UIImage * _Nonnull)image editModel:(ZLEditImageModel * _Nullable)editModel completion:(void (^ _Nullable)(UIImage * _Nonnull, ZLEditImageModel * _Nullable))completion;
- (nonnull instancetype)initWithImage:(UIImage * _Nonnull)image editModel:(ZLEditImageModel * _Nullable)editModel OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
- (void)viewDidLoad;
- (void)viewDidLayoutSubviews;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class UIGestureRecognizer;

@interface ZLEditImageViewController (SWIFT_EXTENSION(ZLImageEditor)) <UIGestureRecognizerDelegate>
- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer * _Nonnull)gestureRecognizer SWIFT_WARN_UNUSED_RESULT;
@end

@class UICollectionView;
@class NSIndexPath;
@class UICollectionViewCell;

@interface ZLEditImageViewController (SWIFT_EXTENSION(ZLImageEditor)) <UICollectionViewDataSource, UICollectionViewDelegate>
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


@class UIScrollView;
@class UIView;

@interface ZLEditImageViewController (SWIFT_EXTENSION(ZLImageEditor)) <UIScrollViewDelegate>
- (UIView * _Nullable)viewForZoomingInScrollView:(UIScrollView * _Nonnull)scrollView SWIFT_WARN_UNUSED_RESULT;
- (void)scrollViewDidZoom:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewDidEndZooming:(UIScrollView * _Nonnull)scrollView withView:(UIView * _Nullable)view atScale:(CGFloat)scale;
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewDidEndDragging:(UIScrollView * _Nonnull)scrollView willDecelerate:(BOOL)decelerate;
- (void)scrollViewDidEndDecelerating:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewDidEndScrollingAnimation:(UIScrollView * _Nonnull)scrollView;
@end

@class UIEvent;

SWIFT_CLASS("_TtC13ZLImageEditor15ZLEnlargeButton")
@interface ZLEnlargeButton : UIButton
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

enum ZLFilterType : NSInteger;

SWIFT_CLASS("_TtC13ZLImageEditor8ZLFilter")
@interface ZLFilter : NSObject
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name filterType:(enum ZLFilterType)filterType OBJC_DESIGNATED_INITIALIZER;
/// 可传入 applier 自定义滤镜
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name applier:(UIImage * _Nonnull (^ _Nullable)(UIImage * _Nonnull))applier OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface ZLFilter (SWIFT_EXTENSION(ZLImageEditor))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<ZLFilter *> * _Nonnull all;)
+ (NSArray<ZLFilter *> * _Nonnull)all SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLFilter * _Nonnull normal;)
+ (ZLFilter * _Nonnull)normal SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLFilter * _Nonnull clarendon;)
+ (ZLFilter * _Nonnull)clarendon SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLFilter * _Nonnull nashville;)
+ (ZLFilter * _Nonnull)nashville SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLFilter * _Nonnull apply1977;)
+ (ZLFilter * _Nonnull)apply1977 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLFilter * _Nonnull toaster;)
+ (ZLFilter * _Nonnull)toaster SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLFilter * _Nonnull chrome;)
+ (ZLFilter * _Nonnull)chrome SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLFilter * _Nonnull fade;)
+ (ZLFilter * _Nonnull)fade SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLFilter * _Nonnull instant;)
+ (ZLFilter * _Nonnull)instant SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLFilter * _Nonnull process;)
+ (ZLFilter * _Nonnull)process SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLFilter * _Nonnull transfer;)
+ (ZLFilter * _Nonnull)transfer SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLFilter * _Nonnull tone;)
+ (ZLFilter * _Nonnull)tone SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLFilter * _Nonnull linear;)
+ (ZLFilter * _Nonnull)linear SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLFilter * _Nonnull sepia;)
+ (ZLFilter * _Nonnull)sepia SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLFilter * _Nonnull mono;)
+ (ZLFilter * _Nonnull)mono SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLFilter * _Nonnull noir;)
+ (ZLFilter * _Nonnull)noir SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLFilter * _Nonnull tonal;)
+ (ZLFilter * _Nonnull)tonal SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, ZLFilterType, closed) {
  ZLFilterTypeNormal = 0,
  ZLFilterTypeChrome = 1,
  ZLFilterTypeFade = 2,
  ZLFilterTypeInstant = 3,
  ZLFilterTypeProcess = 4,
  ZLFilterTypeTransfer = 5,
  ZLFilterTypeTone = 6,
  ZLFilterTypeLinear = 7,
  ZLFilterTypeSepia = 8,
  ZLFilterTypeMono = 9,
  ZLFilterTypeNoir = 10,
  ZLFilterTypeTonal = 11,
};


SWIFT_CLASS("_TtC13ZLImageEditor16ZLImageClipRatio")
@interface ZLImageClipRatio : NSObject
@property (nonatomic, copy) NSString * _Nonnull title;
@property (nonatomic, readonly) CGFloat whRatio;
@property (nonatomic, readonly) BOOL isCircle;
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title whRatio:(CGFloat)whRatio isCircle:(BOOL)isCircle OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface ZLImageClipRatio (SWIFT_EXTENSION(ZLImageEditor))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLImageClipRatio * _Nonnull custom;)
+ (ZLImageClipRatio * _Nonnull)custom SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLImageClipRatio * _Nonnull circle;)
+ (ZLImageClipRatio * _Nonnull)circle SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLImageClipRatio * _Nonnull wh1x1;)
+ (ZLImageClipRatio * _Nonnull)wh1x1 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLImageClipRatio * _Nonnull wh3x4;)
+ (ZLImageClipRatio * _Nonnull)wh3x4 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLImageClipRatio * _Nonnull wh4x3;)
+ (ZLImageClipRatio * _Nonnull)wh4x3 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLImageClipRatio * _Nonnull wh2x3;)
+ (ZLImageClipRatio * _Nonnull)wh2x3 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLImageClipRatio * _Nonnull wh3x2;)
+ (ZLImageClipRatio * _Nonnull)wh3x2 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLImageClipRatio * _Nonnull wh9x16;)
+ (ZLImageClipRatio * _Nonnull)wh9x16 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLImageClipRatio * _Nonnull wh16x9;)
+ (ZLImageClipRatio * _Nonnull)wh16x9 SWIFT_WARN_UNUSED_RESULT;
@end

@class UIColor;
@protocol ZLImageStickerContainerDelegate;
@protocol ZLTextFontChooserDelegate;
enum FeedbackStyle : NSInteger;

SWIFT_CLASS("_TtC13ZLImageEditor26ZLImageEditorConfiguration")
@interface ZLImageEditorConfiguration : NSObject
+ (ZLImageEditorConfiguration * _Nonnull)default SWIFT_WARN_UNUSED_RESULT;
+ (void)resetConfiguration;
/// Draw colors for image editor.
@property (nonatomic, copy) NSArray<UIColor *> * _Nonnull drawColors;
/// The default draw color. If this color not in editImageDrawColors, will pick the first color in editImageDrawColors as the default.
@property (nonatomic, strong) UIColor * _Nonnull defaultDrawColor;
/// Edit ratios for image editor.
@property (nonatomic, copy) NSArray<ZLImageClipRatio *> * _Nonnull clipRatios;
/// Text sticker colors for image editor.
@property (nonatomic, copy) NSArray<UIColor *> * _Nonnull textStickerTextColors;
/// The default text sticker color. If this color not in textStickerTextColors, will pick the first color in textStickerTextColors as the default.
@property (nonatomic, strong) UIColor * _Nonnull textStickerDefaultTextColor;
/// Whether text sticker allows line break.
@property (nonatomic) BOOL textStickerCanLineBreak;
/// Filters for image editor.
@property (nonatomic, copy) NSArray<ZLFilter *> * _Nonnull filters;
@property (nonatomic, strong) UIView <ZLImageStickerContainerDelegate> * _Nullable imageStickerContainerView;
@property (nonatomic, strong) UIView <ZLTextFontChooserDelegate> * _Nullable fontChooserContainerView;
/// Give an impact feedback when the adjust slider value is zero. Defaults to true.
@property (nonatomic) BOOL impactFeedbackWhenAdjustSliderValueIsZero SWIFT_AVAILABILITY(ios,introduced=10.0);
/// Impact feedback style. Defaults to .medium
@property (nonatomic) enum FeedbackStyle impactFeedbackStyle SWIFT_AVAILABILITY(ios,introduced=10.0);
/// If image edit tools only has clip and this property is true. When you click edit, the cropping interface (i.e. ZLClipImageViewController) will be displayed. Defaults to false
@property (nonatomic) BOOL showClipDirectlyIfOnlyHasClipTool;
/// Whether to support redo in graffiti and mosaic tools. Defaults to false
@property (nonatomic) BOOL canRedo;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface ZLImageEditorConfiguration (SWIFT_EXTENSION(ZLImageEditor))
@end

typedef SWIFT_ENUM(NSInteger, EditTool, closed) {
  EditToolDraw = 0,
  EditToolClip = 1,
  EditToolImageSticker = 2,
  EditToolTextSticker = 3,
  EditToolMosaic = 4,
  EditToolFilter = 5,
  EditToolAdjust = 6,
};

typedef SWIFT_ENUM(NSInteger, AdjustTool, closed) {
  AdjustToolBrightness = 0,
  AdjustToolContrast = 1,
  AdjustToolSaturation = 2,
};

typedef SWIFT_ENUM(NSInteger, FeedbackStyle, closed) {
  FeedbackStyleLight = 0,
  FeedbackStyleMedium = 1,
  FeedbackStyleHeavy = 2,
};


typedef SWIFT_ENUM(NSInteger, ZLImageEditorLanguageType, closed) {
  ZLImageEditorLanguageTypeSystem = 0,
  ZLImageEditorLanguageTypeChineseSimplified = 1,
  ZLImageEditorLanguageTypeChineseTraditional = 2,
  ZLImageEditorLanguageTypeEnglish = 3,
  ZLImageEditorLanguageTypeJapanese = 4,
  ZLImageEditorLanguageTypeFrench = 5,
  ZLImageEditorLanguageTypeGerman = 6,
  ZLImageEditorLanguageTypeRussian = 7,
  ZLImageEditorLanguageTypeVietnamese = 8,
  ZLImageEditorLanguageTypeKorean = 9,
  ZLImageEditorLanguageTypeMalay = 10,
  ZLImageEditorLanguageTypeItalian = 11,
  ZLImageEditorLanguageTypeIndonesian = 12,
  ZLImageEditorLanguageTypePortuguese = 13,
  ZLImageEditorLanguageTypeSpanish = 14,
  ZLImageEditorLanguageTypeTurkish = 15,
  ZLImageEditorLanguageTypeArabic = 16,
  ZLImageEditorLanguageTypeUkrainian = 17,
};

enum HUDStyle : NSInteger;

SWIFT_CLASS("_TtC13ZLImageEditor28ZLImageEditorUIConfiguration")
@interface ZLImageEditorUIConfiguration : NSObject
+ (ZLImageEditorUIConfiguration * _Nonnull)default SWIFT_WARN_UNUSED_RESULT;
+ (void)resetConfiguration;
/// HUD style. Defaults to dark.
@property (nonatomic) enum HUDStyle hudStyle;
/// Adjust Slider Type
@property (nonatomic) enum ZLAdjustSliderType adjustSliderType;
/// Language for framework.
@property (nonatomic) enum ZLImageEditorLanguageType languageType;
/// Developers can customize languages (This property is only for objc).
/// warning:
/// Please pay attention to the placeholders contained in languages when changing, such as %ld, %@.
/// <ul>
///   <li>
///     example: If you needs to replace
///     key: @“loading”, value: @“loading, waiting please” language,
///     The dictionary that needs to be passed in is @[@“hudLoading”: @“text to be replaced”].
///   </li>
/// </ul>
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull customLanguageConfig_objc;
/// Developers can customize images, but the name of the custom image resource must be consistent with the image name in the replaced bundle.
/// <ul>
///   <li>
///     example: Developers need to replace the selected and unselected image resources, and the array that needs to be passed in is
///     [“zl_btn_selected”, “zl_btn_unselected”].
///   </li>
/// </ul>
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull customImageNames;
/// Developers can customize images, but the name of the custom image resource must be consistent with the image name in the replaced bundle.
/// <ul>
///   <li>
///     example: Developers need to replace the selected and unselected image resources, and the array that needs to be passed in is
///     [“zl_btn_selected”: selectedImage, “zl_btn_unselected”: unselectedImage].
///   </li>
/// </ul>
@property (nonatomic, copy) NSDictionary<NSString *, UIImage *> * _Nonnull customImageForKey_objc;
/// The normal color of adjust slider.
@property (nonatomic, strong) UIColor * _Nonnull adjustSliderNormalColor;
/// The tint color of adjust slider.
@property (nonatomic, strong) UIColor * _Nonnull adjustSliderTintColor;
/// The background color of edit done button.
@property (nonatomic, strong) UIColor * _Nonnull editDoneBtnBgColor;
/// The title color of edit done button.
@property (nonatomic, strong) UIColor * _Nonnull editDoneBtnTitleColor;
/// The normal background color of ashbin.
@property (nonatomic, strong) UIColor * _Nonnull ashbinNormalBgColor;
/// The tint background color of ashbin.
@property (nonatomic, strong) UIColor * _Nonnull ashbinTintBgColor;
/// The normal color of the title below the various tools in the image editor.
@property (nonatomic, strong) UIColor * _Nonnull toolTitleNormalColor;
/// The tint color of the title below the various tools in the image editor.
@property (nonatomic, strong) UIColor * _Nonnull toolTitleTintColor;
/// The highlighted color of the tool icon.
@property (nonatomic, strong) UIColor * _Nullable toolIconHighlightedColor;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Provide an image sticker container view that conform to this protocol must be a subclass of UIView
SWIFT_PROTOCOL("_TtP13ZLImageEditor31ZLImageStickerContainerDelegate_")
@protocol ZLImageStickerContainerDelegate
@property (nonatomic, copy) void (^ _Nullable selectImageBlock)(UIImage * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable hideBlock)(void);
- (void)showIn:(UIView * _Nonnull)view;
@end


SWIFT_CLASS("_TtC13ZLImageEditor19ZLImageStickerState")
@interface ZLImageStickerState : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13ZLImageEditor12ZLMosaicPath")
@interface ZLMosaicPath : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13ZLImageEditor13ZLProgressHUD")
@interface ZLProgressHUD : UIView
- (nonnull instancetype)initWithStyle:(enum HUDStyle)style OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)show;
- (void)hide;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM(NSInteger, HUDStyle, closed) {
  HUDStyleLight = 0,
  HUDStyleLightBlur = 1,
  HUDStyleDark = 2,
  HUDStyleDarkBlur = 3,
};

@class UIFont;

/// Provide an text font choose view that conform to this protocol must be a subclass of UIView
SWIFT_PROTOCOL("_TtP13ZLImageEditor25ZLTextFontChooserDelegate_")
@protocol ZLTextFontChooserDelegate
@property (nonatomic, copy) void (^ _Nullable selectFontBlock)(UIFont * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable hideBlock)(void);
- (void)showIn:(UIView * _Nonnull)view;
@end


SWIFT_CLASS("_TtC13ZLImageEditor18ZLTextStickerState")
@interface ZLTextStickerState : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
